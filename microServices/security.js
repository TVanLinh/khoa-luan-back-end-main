const jwt = require('jsonwebtoken');
const Promise = require('bluebird');
const User = require('./model/user');

/** Authentication and authorization 
 *  Authenticated by verifying token
 *  Authorized by looking at httpVerb, controllerName, methodName in resource collection
 *  @param string secret - secret key used to generate token. secret key is used for verifying token
 *  @param number securityLevel - 0 Auth is not required, 1 must be authenticated, 2 must be authorized
 *  
 *  @param string controllerName, methodName
 *  @param string httpVerb - get | post | put | delete
 *  @param string token which generated by SHA256
 * 
 *  @author Hoang Nguyen
 *  
 */
module.exports = function(token, httpVerb, controllerName, methodName, securityLevel, secret){
    return new Promise(function(resolve,reject){
        if(securityLevel) {
            Promise.try(()=>jwt.verify(token, secret))
            .then(user => {
                if(securityLevel === 2) {//check authorization
                    return User.findById(user.userId).
                        populate({
                            path: 'roles',
                            populate: { path: 'backends', 
                                        match: {activated: true, 
                                                httpVerb: httpVerb.trim().toLowerCase(), 
                                                controller: controllerName.trim().toLowerCase(), 
                                                method: methodName.trim().toLowerCase()}, 
                            },
                            match: {activated: true}
                        });
                } else resolve(true);
            })
            .then(author => {
                if(author && author.roles && author.roles.length 
                    && author.roles[0].backends && author.roles[0].backends.length
                    && (author.roles[0].backends[0].controller === controllerName.trim().toLowerCase())
                    && (author.roles[0].backends[0].method === methodName.trim().toLowerCase())
                    && (author.roles[0].backends[0].httpVerb === httpVerb.trim().toLowerCase())){
                        resolve(true);
                    }
                else reject(false);
            })
            .catch(jwt.JsonWebTokenError, err => { reject('JsonWebTokenError'); })
            .catch(jwt.NotBeforeError, err => { reject('NotBeforeError'); })
            .catch(jwt.TokenExpiredError, err => { reject('TokenExpiredError'); })
            .catch(err => { reject('Unexpected Error'); });
        } else {
            resolve(0);
        }
    });
};